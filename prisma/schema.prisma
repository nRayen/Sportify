generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id(map: "USER_pkey") @default(autoincrement()) @map("id_user")
  pseudo           String             @unique @db.VarChar(50)
  firstname        String             @db.VarChar(50)
  lastname         String             @db.VarChar(50)
  email            String             @unique(map: "USER_email_key") @db.VarChar(100)
  password         String             @db.VarChar(255)
  birthday         DateTime?          @db.Date
  sex              String?            @db.Char(1)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  last_auth        DateTime?          @db.Timestamp(6)
  Exercice         Exercice[]
  PhysicalData    PhysicalData[]
  ResetPasswordKey ResetPasswordKey[]
  Seance           Seance[]
}

model Seance {
  id            Int             @id(map: "seance_pkey") @default(autoincrement()) @map("id_seance")
  id_user       Int
  title         String          @db.VarChar(15)
  date          DateTime        @db.Timestamptz(6)
  duration      Int
  objective     String?
  ExerciceStats ExerciceStats[]
  User          User            @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "user_id_fkey")
}

model ResetPasswordKey {
  id         Int      @id @default(autoincrement()) @map("id_reset_password_key")
  key        String   @db.VarChar(100)
  id_user    Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  User       User     @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "user_id_fkey")
}

model Exercice {
  id            Int             @id @default(autoincrement()) @map("id_exercice")
  title         String          @db.VarChar(50)
  description   String?
  public        Boolean         @default(false)
  id_user       Int
  User          User            @relation(fields: [id_user], references: [id], onDelete: Cascade, map: "user_id_fkey")
  ExerciceStats ExerciceStats[]
}

model ExerciceStats {
  id          Int      @id @default(autoincrement()) @map("id_exercice_stats")
  id_exercice Int
  id_seance   Int
  reps        Int
  weight      Decimal  @db.Decimal(5, 1)
  sets        Int
  Exercice    Exercice @relation(fields: [id_exercice], references: [id], onDelete: Cascade, map: "exercice_id_fkey")
  Seance      Seance   @relation(fields: [id_seance], references: [id], onDelete: Cascade, map: "seance_id_fkey")
}

model PhysicalData {
  id         Int      @id @default(autoincrement()) @map("id_physical_data")
  created_at DateTime @default(now()) @db.Timestamp(6)
  height     Int
  weight     Decimal  @db.Decimal(5, 1)
  id_user    Int
  User       User     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_fkey")
}
